# Solution 1 
#include <vector>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  
  for (int i = 0; i < array.size(); i++) {
      for (int j = 0; j < array.size(); j++) {
          if ((array[i] + array[j] == targetSum) && (j != i)) {
                  return {array[i], array[j]};
          }
      } 
  }
  
  return {};
}

#Solution 2
#include <vector>
#include <map>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  map<int, int> hashTable;
  for (int i = 0; i < array.size(); i++) {
    int rem = targetSum - array[i];
    if (hashTable[rem] == 1) {
      return {array[i], rem};
    }
    hashTable[array[i]] = 1;
  }
  return {};
}

#Solution 3
#include <vector>
#include <set>
using namespace std;

vector<int> twoNumberSum(vector<int> array, int targetSum) {
  sort(array.begin(), array.end());
  vector<int>::iterator left = array.begin();
  vector<int>::iterator right = array.end() - 1;
  while (left != right) {
    int result = (*left) + (*right);
    if (result == targetSum) {
      return { (*left), (*right) };
    } else if (result < targetSum) {
      left++;
    } else {
      right--;
    }
  }
  return {};
}
